{"version":3,"names":["React","memo","Animated","useAnimatedProps","useInternal","Icon","iconComponent","name","theme","AnimatedIcon","createAnimatedComponent","iconProps","color","value","createElement","size","animatedProps"],"sources":["Icon.tsx"],"sourcesContent":["import React, { memo } from 'react';\n\nimport Animated, { useAnimatedProps } from 'react-native-reanimated';\nimport { useInternal } from '../../hooks';\n\ntype IconComponentProps = {\n  name: string;\n  size: number;\n  animatedProps: Partial<{ color: string }>;\n};\n\n// Update iconComponent type, React.ComponentClass<IconComponentProps, any>\ntype IconProps = {\n  iconComponent: any;\n  name: string;\n};\n\nconst Icon = ({ iconComponent, name }: IconProps) => {\n  const { theme } = useInternal();\n  let AnimatedIcon =\n    Animated.createAnimatedComponent<IconComponentProps>(iconComponent);\n\n  const iconProps = useAnimatedProps(() => {\n    return {\n      color: theme.value === 'light' ? 'black' : 'white',\n    };\n  }, [theme]);\n\n  // @ts-ignore\n  return <AnimatedIcon name={name} size={18} animatedProps={iconProps} />;\n};\n\nexport default memo(Icon);\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,IAAI,QAAQ,OAAO;AAEnC,OAAOC,QAAQ,IAAIC,gBAAgB,QAAQ,yBAAyB;AACpE,SAASC,WAAW,QAAQ,aAAa;;AAQzC;;AAMA,MAAMC,IAAI,GAAGA,CAAC;EAAEC,aAAa;EAAEC;AAAgB,CAAC,KAAK;EACnD,MAAM;IAAEC;EAAM,CAAC,GAAGJ,WAAW,CAAC,CAAC;EAC/B,IAAIK,YAAY,GACdP,QAAQ,CAACQ,uBAAuB,CAAqBJ,aAAa,CAAC;EAErE,MAAMK,SAAS,GAAGR,gBAAgB,CAAC,MAAM;IACvC,OAAO;MACLS,KAAK,EAAEJ,KAAK,CAACK,KAAK,KAAK,OAAO,GAAG,OAAO,GAAG;IAC7C,CAAC;EACH,CAAC,EAAE,CAACL,KAAK,CAAC,CAAC;;EAEX;EACA,oBAAOR,KAAA,CAAAc,aAAA,CAACL,YAAY;IAACF,IAAI,EAAEA,IAAK;IAACQ,IAAI,EAAE,EAAG;IAACC,aAAa,EAAEL;EAAU,CAAE,CAAC;AACzE,CAAC;AAED,4BAAeV,IAAI,CAACI,IAAI,CAAC","ignoreList":[]}