{"version":3,"names":[],"sources":["types.d.ts"],"sourcesContent":["import { ViewStyle } from 'react-native';\nimport { MenuItemProps } from '../menu/types';\nimport { TransformOriginAnchorPosition } from '../../utils/calculations';\n\nexport type HoldItemProps = {\n  /**\n   * List of context menu items.\n   * @type MenuItemProps[]\n   * @default []\n   */\n  items: MenuItemProps[];\n\n  /**\n   * Object of keys that same name with items to match parameters to onPress actions.\n   * @type { [name: string]: (string | number)[] }\n   * @examples\n   * ```js\n   * const items = [\n   *  {text: 'Reply', onPress: (messageId) => {}},\n   *  {text: 'Copy', onPress: (messageText) => {}},\n   * ]\n   * ...\n   * <HoldItem\n   *    items={items}\n   *    actionParams={{\n   *      Reply: ['dd443224-7f43'],\n   *      Copy: ['Hello World!']\n   *    }}\n   * ><View/></HoldItem>\n   * ```\n   */\n  actionParams?: {\n    [name: string]: any[];\n  };\n\n  children: React.ReactElement | React.ReactElement[];\n\n  /**\n   * Menu anchor position is calculated automaticly.\n   * But you can override the calculation by passing an anchor position.\n   * @type TransformOriginAnchorPosition\n   * @examples\n   * menuAnchorPosition=\"top-bottom\"\n   */\n  menuAnchorPosition?: TransformOriginAnchorPosition;\n\n  /**\n   * Disables moving holded item\n   * @type boolean\n   * @default false\n   * @examples\n   * disableMove={true}\n   */\n  disableMove?: boolean;\n\n  /**\n   * HoldItem wrapper component styles.\n   * You may need for some examples like dynamic width or hight like message boxes.\n   * See Whatsapp example.\n   * @type ViewStyles\n   * @default {}\n   * @examples\n   * containerStyles={{ maxWidth: '80%' }}\n   */\n  containerStyles?: ViewStyle | ViewStyle[];\n\n  /**\n   * Theme for menu background and texts\n   * @type string\n   * @examples\n   * theme=\"light\"\n   */\n  theme?: 'light' | 'dark';\n\n  /**\n   * Set true if you want to open menu from bottom\n   * @type boolean\n   * @default false\n   * @examples\n   * bottom={true}\n   */\n  bottom?: boolean;\n\n  /**\n   * Set if you'd like a different tap activation\n   * @type string\n   * @default 'hold'\n   * @examples\n   * activateOn=\"hold\"\n   */\n  activateOn?: 'tap' | 'double-tap' | 'hold';\n\n  /**\n   * Set if you'd like to enable haptic feedback on activation\n   * @type string\n   * @default 'Medium'\n   * @examples\n   * hapticFeedback=\"None\"\n   */\n  hapticFeedback?:\n    | 'None'\n    | 'Selection'\n    | 'Light'\n    | 'Medium'\n    | 'Heavy'\n    | 'Success'\n    | 'Warning'\n    | 'Error';\n\n  /**\n   * Set true if you want to close menu when tap to HoldItem\n   * @type boolean\n   * @default false\n   * @examples\n   * closeOnTap={true}\n   */\n  closeOnTap?: boolean;\n\n  /**\n   * Set delay before long tap will activate gesture. May be useful to increase this value in lists\n   * @type number\n   * @default 150\n   * @examples\n   * longPressMinDurationMs={250}\n   */\n  longPressMinDurationMs?: number;\n};\n\nexport type GestureHandlerProps = {\n  children: React.ReactElement | React.ReactElement[];\n};\n"],"mappings":"","ignoreList":[]}